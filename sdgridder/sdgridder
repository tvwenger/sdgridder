#!/usr/bin/env python
"""
sdgridder - executable

Copyright(C) 2021 by
Trey V. Wenger; tvwenger@gmail.com

GNU General Public License v3 (GNU GPLv3)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Changelog:
2021-02-15 Trey V. Wenger
"""

import argparse
from sdgridder import sdgridder

__VERSION = "0.1"


parser = argparse.ArgumentParser(
    description="sdgridder: Gridder for single dish telescope data",
    prog="sdgridder",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument(
    "files", type=str, nargs="+", help="SDFITS filenames or pattern to search"
)
parser.add_argument(
    "--outname",
    type=str,
    default="gridded",
    help="Prefix for gridded FITS image filenames",
)
parser.add_argument(
    "--start",
    type=float,
    default=None,
    help="Starting velocity (km/s) of regridded spectral axis",
)
parser.add_argument(
    "--end",
    type=float,
    default=None,
    help="Ending velocity (km/s) of regridded spectral axis",
)
parser.add_argument(
    "--width",
    type=float,
    default=None,
    help="Velocity channel width (km/s) of regridded spectral axis",
)
parser.add_argument(
    "--pixel_size", type=float, default=None, help="Pixel size (deg)"
)
parser.add_argument(
    "--gauss_fwhm",
    type=float,
    default=None,
    help="Convolution kernel FWHM (deg)",
)
parser.add_argument(
    "--num_cpus",
    type=int,
    default=None,
    help="Number of CPUs for multiprocessing",
)
parser.add_argument(
    "--verbose",
    action="store_true",
    default=False,
    help="Print status information",
)
parser.add_argument(
    "--overwrite",
    action="store_true",
    default=False,
    help="Overwrite existing output FITS images",
)
parser.add_argument(
    "-v", "--version", action="version", version="%(prog)s " + __VERSION
)
args = vars(parser.parse_args())
if len(args["files"]) == 0:
    raise ValueError("No files found")
sdgridder.gridder(**args)
